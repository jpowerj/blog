#   #   fill=cbPalette[1], alpha=0.2
#   # ) +
#   # # 95% ellipse
#   # stat_ellipse(geom="polygon", type="norm", linewidth=g_linewidth, level=0.95, fill=cbPalette[1], alpha=0.25) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.95) +
#   # # 99.7% ellipse
#   # stat_ellipse(geom='polygon', type="norm", linewidth=g_linewidth, level=0.997, fill=cbPalette[1], alpha=0.125) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.997) +
#   # Lines at x=0 and y=0
#   geom_vline(xintercept=0, linetype="dashed", linewidth=g_linewidth) +
#   geom_hline(yintercept=0, linetype="dashed", linewidth = g_linewidth) +
#   geom_point(
#     size = g_pointsize / 3,
#     #alpha=0.5
#   ) +
#   geom_segment(
#     aes(x=0, y=-1, xend=0, yend=1),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[1]
#   ) +
#   geom_segment(
#     aes(x=-3, y=0, xend=3, yend=0),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[2]
#   ) +
#   dsan_theme() +
#   coord_fixed()
var(data_df$x)
var(data_df$y)
#| label: pca-dgp-no-covar
library(tidyverse)
library(MASS)
library(ggforce)
N <- 5000
Mu <- c(0, 0)
var_x <- 3
var_y <- 1
Sigma <- matrix(c(var_x, 0, 0, var_y), nrow=2)
data_df <- as_tibble(mvrnorm(N, Mu, Sigma))
colnames(data_df) <- c("x","y")
# data_df <- data_df |> mutate(
#   within_5 = x < 5,
#   within_sq5 = x < sqrt(5)
# )
#nrow(data_df |> filter(within_5)) / nrow(data_df)
#nrow(data_df |> filter(within_sq5)) / nrow(data_df)
# And plot
# ggplot(data_df, aes(x=x, y=y)) +
#   # 68% ellipse
#   # stat_ellipse(geom="polygon", type="norm", linewidth=g_linewidth, level=0.68, fill=cbPalette[1], alpha=0.5) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.68) +
#   geom_ellipse(
#     aes(x0=0, y0=0, a=3, b=1, angle=0),
#     linewidth = g_linewidth
#   ) +
#   # geom_ellipse(
#   #   aes(x0=0, y0=0, a=sqrt(5), b=1, angle=0),
#   #   linewidth = g_linewidth,
#   #   geom="polygon",
#   #   fill=cbPalette[1], alpha=0.2
#   # ) +
#   # # 95% ellipse
#   # stat_ellipse(geom="polygon", type="norm", linewidth=g_linewidth, level=0.95, fill=cbPalette[1], alpha=0.25) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.95) +
#   # # 99.7% ellipse
#   # stat_ellipse(geom='polygon', type="norm", linewidth=g_linewidth, level=0.997, fill=cbPalette[1], alpha=0.125) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.997) +
#   # Lines at x=0 and y=0
#   geom_vline(xintercept=0, linetype="dashed", linewidth=g_linewidth) +
#   geom_hline(yintercept=0, linetype="dashed", linewidth = g_linewidth) +
#   geom_point(
#     size = g_pointsize / 3,
#     #alpha=0.5
#   ) +
#   geom_segment(
#     aes(x=0, y=-1, xend=0, yend=1),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[1]
#   ) +
#   geom_segment(
#     aes(x=-3, y=0, xend=3, yend=0),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[2]
#   ) +
#   dsan_theme() +
#   coord_fixed()
var(data_df$x)
var(data_df$y)
(var_x <- var(data_df$x))
(var_y <- var(data_df$y))
var_x + var_y
#| label: pca-dgp-no-covar
library(tidyverse)
library(MASS)
library(ggforce)
N <- 5000
Mu <- c(0, 0)
var_x <- 3
var_y <- 1
Sigma <- matrix(c(var_x, 0, 0, var_y), nrow=2)
data_df <- as_tibble(mvrnorm(N, Mu, Sigma, empirical=TRUE))
colnames(data_df) <- c("x","y")
# data_df <- data_df |> mutate(
#   within_5 = x < 5,
#   within_sq5 = x < sqrt(5)
# )
#nrow(data_df |> filter(within_5)) / nrow(data_df)
#nrow(data_df |> filter(within_sq5)) / nrow(data_df)
# And plot
# ggplot(data_df, aes(x=x, y=y)) +
#   # 68% ellipse
#   # stat_ellipse(geom="polygon", type="norm", linewidth=g_linewidth, level=0.68, fill=cbPalette[1], alpha=0.5) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.68) +
#   geom_ellipse(
#     aes(x0=0, y0=0, a=3, b=1, angle=0),
#     linewidth = g_linewidth
#   ) +
#   # geom_ellipse(
#   #   aes(x0=0, y0=0, a=sqrt(5), b=1, angle=0),
#   #   linewidth = g_linewidth,
#   #   geom="polygon",
#   #   fill=cbPalette[1], alpha=0.2
#   # ) +
#   # # 95% ellipse
#   # stat_ellipse(geom="polygon", type="norm", linewidth=g_linewidth, level=0.95, fill=cbPalette[1], alpha=0.25) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.95) +
#   # # 99.7% ellipse
#   # stat_ellipse(geom='polygon', type="norm", linewidth=g_linewidth, level=0.997, fill=cbPalette[1], alpha=0.125) +
#   # stat_ellipse(type="norm", linewidth=g_linewidth, level=0.997) +
#   # Lines at x=0 and y=0
#   geom_vline(xintercept=0, linetype="dashed", linewidth=g_linewidth) +
#   geom_hline(yintercept=0, linetype="dashed", linewidth = g_linewidth) +
#   geom_point(
#     size = g_pointsize / 3,
#     #alpha=0.5
#   ) +
#   geom_segment(
#     aes(x=0, y=-1, xend=0, yend=1),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[1]
#   ) +
#   geom_segment(
#     aes(x=-3, y=0, xend=3, yend=0),
#     linewidth = g_linewidth,
#     arrow = arrow(length = unit(0.1, "npc")),
#     color=cbPalette[2]
#   ) +
#   dsan_theme() +
#   coord_fixed()
(var_x <- var(data_df$x))
(var_y <- var(data_df$y))
var_x + var_y
Sigma_rot <- matrix(c(3,0,0,1), nrow=2)
eigen(Sigma_rot)
Sigma_rot <- matrix(c(5/2,3/2,3/2,5/2), nrow=2)
eigen(Sigma_rot)
Sigma_rot <- matrix(c(2,1,1,2), nrow=2)
eigen(Sigma_rot)
library(reticulate)
reticulate::py_install("pyarrow")
install.packages("feather")
uninstall.packages("feather")
remove.packages("feather")
install.packages("arrow")
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.9
(ent_r2 <- my_ent(p_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.9
(ent_r2 <- my_ent(p_r2))
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.95
(ent_r2 <- my_ent(p_r2))
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.95
(ent_r2 <- my_ent(p_r2))
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.95
writeLines("H(R2):")
(ent_r2 <- my_ent(p_r2))
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
p_r1 <- 13/25
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
p_r2 <- 0.95
writeLines("H(R2):")
(ent_r2 <- my_ent(p_r2))
writeLines("Mean(H(R1),H(R2)):")
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
writeLines("p_R1:")
(p_r1 <- 13/25)
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
writeLines("p_R2:")
(p_r2 <- 0.95)
writeLines("H(R2):")
(ent_r2 <- my_ent(p_r2))
writeLines("Mean(H(R1),H(R2)):")
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
writeLines("p_R1:")
(p_r1 <- 13/25)
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
writeLines("p_R2:")
(p_r2 <- 0.95)
writeLines("H(R2):")
(ent_r2 <- my_ent(p_r2))
writeLines("Mean(p_R1,p_R2):")
(mean_p <- (1/2)*(p_r1 + p_r2))
writeLines("Mean(H(R1),H(R2)):")
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: ent-calcs
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
writeLines("p_R1:")
(p_r1 <- 13/25)
writeLines("H(R1):")
(ent_r1 <- my_ent(p_r1))
writeLines("p_R2:")
(p_r2 <- 0.95)
writeLines("H(R2):")
(ent_r2 <- my_ent(p_r2))
writeLines("Mean(p_R1,p_R2):")
(mean_p <- (1/2)*(p_r1 + p_r2))
writeLines("H(Mean(p_R1,p_R2)):")
(ent_at_mean <- my_ent(mean_p))
writeLines("Mean(H(R1),H(R2)):")
(mean_ent <- (1/2)*(ent_r1+ent_r2))
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(x) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(x) 2*p*(1-p)
range_df <- tibble(x=c(0,1))
ggplot(data=data.frame(x=c(0,1)), aes(x=x)) +
stat_function(fun=my_ent) +
#stat_function(fun=my_gini) +
dsan_theme()
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(x) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(x) 2*p*(1-p)
x_vals <- seq(0, 1, 0.01)
ent_df <- tibble(x=x_vals, y=my_ent(x_vals), measure="Entropy")
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(x) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(x) 2*p*(1-p)
x_vals <- seq(0, 1, 0.01)
ent_vals <- sapply(x_vals, my_ent)
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(p) 2*p*(1-p)
x_vals <- seq(0, 1, 0.01)
ent_vals <- sapply(x_vals, my_ent)
ent_df <- tibble(x=x_vals, y=ent_vals, measure="Entropy")
gini_vals <- sapply(x_vals, my_gini)
gini_df <- tibble(x=x_vals, y=gini_vals, measure="Gini")
data_df <- bind_rows(ent_df, gini_df)
ggplot(data=data_df, aes(x=x, y=y, color=measure)) +
geom_line() +
dsan_theme()
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(p) p*(1-p)
x_vals <- seq(0, 1, 0.01)
ent_vals <- sapply(x_vals, my_ent)
ent_df <- tibble(x=x_vals, y=ent_vals, measure="Entropy")
gini_vals <- sapply(x_vals, my_gini)
gini_df <- tibble(x=x_vals, y=gini_vals, measure="Gini")
data_df <- bind_rows(ent_df, gini_df)
ggplot(data=data_df, aes(x=x, y=y, color=measure)) +
geom_line() +
dsan_theme()
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(p) 4*p*(1-p)
x_vals <- seq(0, 1, 0.01)
ent_vals <- sapply(x_vals, my_ent)
ent_df <- tibble(x=x_vals, y=ent_vals, measure="Entropy")
gini_vals <- sapply(x_vals, my_gini)
gini_df <- tibble(x=x_vals, y=gini_vals, measure="Gini")
data_df <- bind_rows(ent_df, gini_df)
ggplot(data=data_df, aes(x=x, y=y, color=measure)) +
geom_line() +
dsan_theme()
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(p) 4*p*(1-p)
x_vals <- seq(0.01, 0.99, 0.01)
ent_vals <- sapply(x_vals, my_ent)
ent_df <- tibble(x=x_vals, y=ent_vals, measure="Entropy")
gini_vals <- sapply(x_vals, my_gini)
gini_df <- tibble(x=x_vals, y=gini_vals, measure="Gini")
data_df <- bind_rows(ent_df, gini_df)
ggplot(data=data_df, aes(x=x, y=y, color=measure)) +
geom_line() +
dsan_theme()
#| label: entropy-vs-gini
library(tidyverse)
my_ent <- function(p) -(p*log2(p) + (1-p)*log2(1-p))
my_gini <- function(p) 4*p*(1-p)
x_vals <- seq(0.01, 0.99, 0.01)
ent_vals <- sapply(x_vals, my_ent)
ent_df <- tibble(x=x_vals, y=ent_vals, measure="Entropy")
gini_vals <- sapply(x_vals, my_gini)
gini_df <- tibble(x=x_vals, y=gini_vals, measure="Gini")
data_df <- bind_rows(ent_df, gini_df)
ggplot(data=data_df, aes(x=x, y=y, color=measure)) +
geom_line() +
dsan_theme() +
scale_color_manual(values=c(cbPalette[1], cbPalette[2]))
library(lubridate)
lubridate::as_date(25)
library(lubridate)
lubridate::as_date(25)
lubridate::date(25)
library(lubridate)
lubridate::as_date(25)
lubridate::y(2023)
library(lubridate)
lubridate::as_date(25)
lubridate::ymd(2023)
library(lubridate)
lubridate::as_date(25)
lubridate::ymd(2023, 1, 1)
library(lubridate)
lubridate::as_date(25)
lubridate::ymd(20230101)
library(lubridate)
d <- lubridate::ymd(20230101)
d
library(lubridate)
d <- lubridate::ymd(20230101)
yday(d) <- 100
library(lubridate)
d <- lubridate::ymd(20230101)
yday(d) <- 100
d
#| label: ski-plot-binary
#| fig-cap: "*(Example adapted from CS229: Machine Learning, Stanford University)*"
library(tidyverse)
library(lubridate)
sample_size <- 100
day <- seq(ymd('2023-01-01'),ymd('2023-12-31'),by='weeks')
lat_bw <- 5
latitude <- seq(-90, 90, by=lat_bw)
ski_df <- expand_grid(day, latitude)
ski_df <- tibble::rowid_to_column(ski_df, var='obs_id')
#ski_df |> head()
# Data-generating process
lat_cutoff <- 35
ski_df <- ski_df |> mutate(
near_equator = abs(latitude) <= lat_cutoff,
northern = latitude > lat_cutoff,
southern = latitude < -lat_cutoff,
first_3m = day < ymd('2023-04-01'),
last_3m = day >= ymd('2023-10-01'),
middle_6m = (day >= ymd('2023-04-01')) & (day < ymd('2023-10-01')),
snowfall = 0
)
# Update the non-zero sections
mu_snow <- 10
sd_snow <- 2.5
# How many northern + first 3 months
num_north_first_3 <- nrow(ski_df[ski_df$northern & ski_df$first_3m,])
ski_df[ski_df$northern & ski_df$first_3m, 'snowfall'] = rnorm(num_north_first_3, mu_snow, sd_snow)
# Northerns + last 3 months
num_north_last_3 <- nrow(ski_df[ski_df$northern & ski_df$last_3m,])
ski_df[ski_df$northern & ski_df$last_3m, 'snowfall'] = rnorm(num_north_last_3, mu_snow, sd_snow)
# How many southern + middle 6 months
num_south_mid_6 <- nrow(ski_df[ski_df$southern & ski_df$middle_6m,])
ski_df[ski_df$southern & ski_df$middle_6m, 'snowfall'] = rnorm(num_south_mid_6, mu_snow, sd_snow)
# And collapse into binary var
ski_df['good_skiing'] = ski_df$snowfall > 0
# This converts day into an int
ski_df <- ski_df |> mutate(
day_num = lubridate::yday(day)
)
#print(nrow(ski_df))
ski_sample <- ski_df |> slice_sample(n = sample_size)
ski_sample |> write_csv("assets/ski.csv")
#| label: ski-plot-binary
#| fig-cap: "*(Example adapted from CS229: Machine Learning, Stanford University)*"
library(tidyverse)
library(lubridate)
sample_size <- 100
day <- seq(ymd('2023-01-01'),ymd('2023-12-31'),by='weeks')
lat_bw <- 5
latitude <- seq(-90, 90, by=lat_bw)
ski_df <- expand_grid(day, latitude)
ski_df <- tibble::rowid_to_column(ski_df, var='obs_id')
#ski_df |> head()
# Data-generating process
lat_cutoff <- 35
ski_df <- ski_df |> mutate(
near_equator = abs(latitude) <= lat_cutoff,
northern = latitude > lat_cutoff,
southern = latitude < -lat_cutoff,
first_3m = day < ymd('2023-04-01'),
last_3m = day >= ymd('2023-10-01'),
middle_6m = (day >= ymd('2023-04-01')) & (day < ymd('2023-10-01')),
snowfall = 0
)
# Update the non-zero sections
mu_snow <- 10
sd_snow <- 2.5
# How many northern + first 3 months
num_north_first_3 <- nrow(ski_df[ski_df$northern & ski_df$first_3m,])
ski_df[ski_df$northern & ski_df$first_3m, 'snowfall'] = rnorm(num_north_first_3, mu_snow, sd_snow)
# Northerns + last 3 months
num_north_last_3 <- nrow(ski_df[ski_df$northern & ski_df$last_3m,])
ski_df[ski_df$northern & ski_df$last_3m, 'snowfall'] = rnorm(num_north_last_3, mu_snow, sd_snow)
# How many southern + middle 6 months
num_south_mid_6 <- nrow(ski_df[ski_df$southern & ski_df$middle_6m,])
ski_df[ski_df$southern & ski_df$middle_6m, 'snowfall'] = rnorm(num_south_mid_6, mu_snow, sd_snow)
# And collapse into binary var
ski_df['good_skiing'] = ski_df$snowfall > 0
# This converts day into an int
ski_df <- ski_df |> mutate(
day_num = lubridate::yday(day)
)
#print(nrow(ski_df))
ski_sample <- ski_df |> slice_sample(n = sample_size)
#ski_sample |> write_csv("assets/ski.csv")
month_vec <- c(ymd('2023-01-01'), ymd('2023-02-01'), ymd('2023-03-01'), ymd('2023-04-01'), ymd('2023-05-01'), ymd('2023-06-01'), ymd('2023-07-01'), ymd('2023-08-01'), ymd('2023-09-01'), ymd('2023-10-01'), ymd('2023-11-01'), ymd('2023-12-01'))
month_labels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
lat_vec <- c(-90, -60, -30, 0, 30, 60, 90)
ggplot(
ski_sample,
aes(
x=day,
y=latitude,
#shape=good_skiing,
color=good_skiing
)) +
geom_point(
size = g_pointsize / 1.5,
#stroke=1.5
) +
dsan_theme() +
labs(
x = "Time of Year",
y = "Latitude",
shape = "Good Skiing?"
) +
scale_shape_manual(name="Good Skiing?", values=c(1, 3)) +
scale_color_manual(name="Good Skiing?", values=c(cbPalette[1], cbPalette[2]), labels=c("No (Sunny)","Yes (Snowy)")) +
scale_x_continuous(
breaks=c(month_vec,ymd('2024-01-01')),
labels=c(month_labels,"Jan")
) +
scale_y_continuous(breaks=lat_vec)
reticulate::py_install("networkx")
install.packages("arules")
install.packages("arulesViz")
install.packages("plotly")
reticulate::py_install("mlxtend")
reticulate::py_install("Jinja2")
install.packages("synthpop")
install.packages("ecoreg")
library(ecoreg)
library(tidyverse)
sick_df <- tribble(
~Province, ~Total_Population, ~Fever, ~High_Fever, ~Cough,
"A", 3, 2, 1, 1,
"B", 4, 1, 1, 2,
"C", 3, 1, 1, 3,
)
sick_df
setwd("/Users/jpj/Library/CloudStorage/Dropbox/homepage-quarto/_scratch")
library(tidyverse)
census_fpath <- "../posts/dc-segregation/assets/census.csv"
census_df <- read_csv(census_fpath)
census_df
library(tidyverse)
census_fpath <- "../posts/dc-segregation/assets/census.csv"
census_df <- read_csv(census_fpath)
census_df |> head()
